GOAL:

Hi,

In this video, I am going to make a console application that lists the names of all videos in any YouTube playlist. I'll supply the program with the id of the YouTube playlist and it will show us the names of all the videos in that playlist.

For example, I have a playlist of my own named Programming Videos, which contains my conference talks, classroom training sessions and screen-casts I made on computer programming topics. This is the Id of that playlist. If I ran my program with this Id, it should show me all the items in this playlist.
[Run the program on the commandline and show them.]

I can even see videos in someone else's playlist. I don't need thier permission for this. However, with this method I am going to show you, I am only going to be able to see the videos they made public. We won't see their private videos, unlisted videos or videos they have yet to publish that they've scheduled for a future date. To see all that, we need to use OAuth and ask their permission. We'll do that bit in a later video.

If you're wondering what that OAuth thing I just said is, watch the videos in this playlist of mine. There's a link to it in the description section of this video.


***
If a user's public data is all we want, we need only an API Key for our application. This API Key is a way for YouTube to know who or which application is asking for data. This helps YouTube not only authenticate the request but also to charge the owner of the application some money for every request.

There's a fixed quota of a number of requests you can make for free. Anything beyond that is chargeable per request.

So, I am going to head over to console.developers.google.com, open my application named FooBar, which we created in the OAuth videos that are in the OAuth playlist. And I am going to create a new API Key.

I won't be showing you my API key, of course, because then anyone could use it and I'll start getting billed.

***

Next, I am going to Enable the YouTube Data API in the console for my application.


***
To use this API, we're going to have to make a GET request to this URL:

baseUrl: https://www.googleapis.com/youtube/v3/playlistitems (endpoint) GET Request

I know this because I went to the YouTube Data API Reference page. [Show google search taking me there]. And I studied it some, then I found out that the endpoint I wanted was PlaylistItems.

To this request, I will supply the following required parameters:
The parameter key with the API key I just generated as its value. [Show copying and pasting it here].
playlistId: [Show my Programming Videos. Copy and paste from here. Leave that page open.]

The only other REQUIRED parameter is named "part."

This indicates the list of data you want in response to your request.

Normally, when you make a request to the YouTube API, it returns everything in a big JSON object. This guy's really big with all kinds of data about the thing you requested. This response is a top-level JSON object with other child objects, which may have other child objects. Most of the times, you don't want the whole thing returned. So, with the "part" parameter, you can say what parts you want returned. Or what objects from inside of the parent object you want in the response.

This helps you avoid getting lots of data back, saving you precious bandwith and cost because YouTube also charges more if you ask for more data from an API request. If you ask for less data, it charges you less.

For this request, to get a list of videos in a playlist [show the page that explains the part for this request], you may supply one or more of these parts.

The question is, which one do we want? To figure that out, let's try out a simple request in this playground thing that YouTube has made for us. And then we'll inspect the response and decide what we want. For now, let me ask for everything so we can see what we want and what we don't.

[Show making the request. Then explain the structure and the meaning of each]

Since I want only the title of each video, I'll just ask for the snippet object. So, my part request parameter will look like this:
part = snippet

That was all the required parameters we need. Let's go over them again:


A base URL, which is https:...
an api key by the parameter name key
the playlistId from which we want to get the list of videos
and part
***

But wait a minute, if I supplied the value "snippet" to the part [do it and show in the playground], I'll still get the whole snippet object, most of which I don't care about. It looks like I would be happy if I just recieved the title from inside the snippet object. Or may be if I wanted title and description.

Let me get both the title and description just to show you how, but we won't be using or displaying the description on our user interface.

To filter future what information we need from a specific object, we use the fields query string parameter.

This takes a list of fields. If you want nested fields, you can use an XPath like syntax. So, inspecting the real response, it looks like I want the items array, and from within the items array, for each item, I need its snippet, and for each snippet, I need just the title and description.

So, my fields looks like this:

fields = items/snippet(title, description)

Wait, let me also get this pageInfo guy here because it tells us how many items are in the playlist. Note that this gives you a complete count of items in the playlist including the hidden ones, the private ones, the unlisted ones, the scheduled ones, etc. But what you will get back in the items array are only the public videos.

So, finally, my fields will look like so:

fields = pageInfo, items/snippet(title, description)


Finally, the API returns a default of 5 items with every request. You can change how many items you want in the response by supplying a value for the optional maxResults parameter. By default, if no value is supplied, 5 items are returned. The maximum value this will take is 50. So, you can get at the most 50 items in a request. If the playlist has more than 50 videos, you'll get only the first 50 with a nextPageToken that you can make as subsequent requests to the same endpoint with the nextPageToken. In a later video, we'll see how pagination works. For now, I'll just say I need 50 videos. My playlist has some 37 odd videos, so I should be fine without having to paginate.

Ok. That's about it.

We're set. Let's write the code.

I am going to write some sloppy code first and then may be later in another video, if there is enough interest, I will refactor it to make it more modular and of a good quality. That's how most good programmers work. They have a goal. They make things work first. Later, they optimize. you don't start with too many goals all at once. You never aim for two targets all at once. So, this isn't going to be the best code. But it'll be code that does the job.